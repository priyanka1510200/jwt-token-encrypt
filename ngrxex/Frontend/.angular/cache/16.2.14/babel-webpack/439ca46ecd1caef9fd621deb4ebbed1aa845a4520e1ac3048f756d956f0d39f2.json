{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this.localStorageKey = 'authToken';\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem(this.localStorageKey, response.token);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.localStorageKey);\n  }\n  getToken() {\n    return localStorage.getItem(this.localStorageKey);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","LoginService","constructor","http","apiUrl","localStorageKey","login","username","password","post","pipe","response","localStorage","setItem","token","logout","removeItem","getToken","getItem","isAuthenticated","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/devmonk--/thime/Frontend/src/app/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private apiUrl = 'http://localhost:3000/api/auth';\n  private localStorageKey = 'authToken';\n\n  constructor(private http: HttpClient) {}\n\n  login(username: string, password: string): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { username, password }).pipe(\n      tap(response => {\n        localStorage.setItem(this.localStorageKey, response.token);\n      })\n    );\n  }\n\n  \n  logout(): void {\n    localStorage.removeItem(this.localStorageKey);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.localStorageKey);\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    return !!token;\n  }\n\n}"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,eAAe,GAAG,WAAW;EAEE;EAEvCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAgB,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACvFV,GAAG,CAACW,QAAQ,IAAG;MACbC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACR,eAAe,EAAEM,QAAQ,CAACG,KAAK,CAAC;IAC5D,CAAC,CAAC,CACH;EACH;EAGAC,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,IAAI,CAACX,eAAe,CAAC;EAC/C;EAEAY,QAAQA,CAAA;IACN,OAAOL,YAAY,CAACM,OAAO,CAAC,IAAI,CAACb,eAAe,CAAC;EACnD;EAEAc,eAAeA,CAAA;IACb,MAAML,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,OAAO,CAAC,CAACH,KAAK;EAChB;EAAC,QAAAM,CAAA,G;qBA3BUnB,YAAY,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZxB,YAAY;IAAAyB,OAAA,EAAZzB,YAAY,CAAA0B,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}